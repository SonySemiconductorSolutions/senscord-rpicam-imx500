name: Run Unit Tests

on:
  pull_request:
  workflow_call:
    inputs:
      ref:
        description: 'The commit/branch/tag to run tests on'
        required: false
        type: string
        default: ''
    outputs:
      result:
        description: 'Unit test execution result'
        value: ${{ jobs.run_unit_test.outputs.result }}
  workflow_dispatch:
    inputs:
      ref:
        description: 'The commit/branch/tag to run tests on'
        required: false
        type: string
        default: ''

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_unit_test_necessity:
    name: Check Unit Test Necessity
    runs-on: ubuntu-22.04
    outputs:
      execute_unit_test: ${{ steps.check.outputs.execute_unit_test }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.ref || github.sha }}

      - name: Check if unit tests should be executed
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            let shouldExecute = true;
            
            // For non-PR events (e.g., main branch push), always execute tests
            if (context.eventName !== 'pull_request') {
              console.log('Non-PR event detected. Unit tests will be executed.');
              core.setOutput('execute_unit_test', 'true');
              return;
            }
            
            // For PR events, check changed files
            try {
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              });
              
              console.log('Changed files:');
              const changedFiles = files.map(file => {
                console.log(`  ${file.filename}`);
                return file.filename;
              });
              
              // Check if any changed files are outside docs/ or patch/ directories
              const shouldSkip = changedFiles.every(file => 
                file.startsWith('docs/') || file.startsWith('patch/')
              );
              
              if (shouldSkip && changedFiles.length > 0) {
                console.log('All changed files are in docs/ or patch/ directories. Skipping unit tests.');
                shouldExecute = false;
              } else {
                console.log('Found changes that require unit test execution.');
              }
              
            } catch (error) {
              console.log('Error checking changed files, will execute tests by default:', error.message);
              shouldExecute = true;
            }
            
            core.setOutput('execute_unit_test', shouldExecute.toString());

  run_unit_test:
    name: Run Unit Tests
    runs-on: ubuntu-22.04
    needs: check_unit_test_necessity
    if: needs.check_unit_test_necessity.outputs.execute_unit_test == 'true'
    outputs:
      result: ${{ steps.test_result.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || inputs.ref || github.sha }}

      - name: Setup environment
        id: setup
        run: |
          echo "Setting up environment for unit tests..."
          cd test/scripts
          
          # Create output.txt file for error logging
          touch output.txt
          
          # Run environment setup
          if ! sudo bash env_setup.sh 2>&1 | tee -a output.txt; then
            echo "Environment setup failed"
            echo "setup_failed=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "Environment setup completed successfully"
            echo "setup_failed=false" >> $GITHUB_OUTPUT
          fi
          
          # Export PATH for subsequent steps
          echo "PATH=$PATH" >> $GITHUB_ENV

      - name: Run unit tests and generate coverage
        id: run_tests
        if: steps.setup.outputs.setup_failed == 'false'
        run: |
          cd test/scripts
          
          # Run unit tests and capture the exit code
          set +e
          bash run_unit_test.sh 2>&1 | tee -a output.txt
          exit_code=$?
          set -e
          
          if [ $exit_code -eq 0 ]; then
            echo "Unit tests completed successfully"
            echo "test_result=success" >> $GITHUB_OUTPUT
          else
            echo "Unit tests failed with exit code: $exit_code"
            
            # Check output for specific error types
            if grep -q "Error: Failed to build\|Error: lcov not found" output.txt; then
              echo "Build error detected"
              echo "test_result=build_error" >> $GITHUB_OUTPUT
            else
              echo "Test execution error detected"
              echo "test_result=test_error" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Set final test result
        id: test_result
        run: |
          if [ "${{ steps.setup.outputs.setup_failed }}" == "true" ]; then
            echo "result=build_error" >> $GITHUB_OUTPUT
          elif [ "${{ steps.run_tests.outputs.test_result }}" != "" ]; then
            echo "result=${{ steps.run_tests.outputs.test_result }}" >> $GITHUB_OUTPUT
          else
            echo "result=build_error" >> $GITHUB_OUTPUT
          fi

      - name: Upload test output log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-output-log
          path: test/scripts/output.txt
          retention-days: 30

      - name: Upload coverage report
        if: steps.run_tests.outputs.test_result == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-html
          path: test/coverage/html/
          retention-days: 30

      - name: Display test summary
        if: always()
        run: |
          echo "## Unit Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Result**: ${{ steps.test_result.outputs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment Setup**: ${{ steps.setup.outputs.setup_failed == 'true' && 'Failed' || 'Success' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Execution**: ${{ steps.run_tests.outputs.test_result || 'Skipped due to setup failure' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "test/scripts/output.txt" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Test Output (Last 50 lines)" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -n 50 test/scripts/output.txt >> $GITHUB_STEP_SUMMARY || echo "No output available" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
